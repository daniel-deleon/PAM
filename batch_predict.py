#!/usr/bin/env python
__author__    = 'Danelle Cline'
__copyright__ = '2016'
__license__   = 'GPL v3'
__contact__   = 'dcline at mbari.org'
__doc__ = '''

Runs transfer learning tests on spectrogram images from the MBARI hydrophone
@var __date__: Date of last svn commit
@undocumented: __doc__ parser
@status: production
@license: GPL
'''

import os
import subprocess

if __name__ == '__main__':
    options = '--learning_rate .01 --random_crop 20'
    months = [ 8, 11, 12]
    prefix = ['BlueWhaleB'] #, 'FinWhale/']
    base_directory = '/Volumes/PAM_Analysis/Batch_Detections/BLED'
    model_dir = '/Volumes/PAM_Analysis/Classifiers/InceptionV3/models/BlueWhaleBUpdate/01_lines_unk'
    exemplar_dir = '/Volumes/PAM_Analysis/TrainingData/data/exemplars/'

    for m in months:
        for p in prefix:
            # image directory where cropped images are located
            image_dir = '{0}/{1}/2015/{2:02}/spectrogram'.format(base_directory, p, m)

            # This is the directory the bottleneck features are generated; bottleneck features are generated by running each image through
            # the inception model. Once these are generated, they are cached.
            bottleneck_dir = '{0}/{1}/bottlenecks'.format(base_directory, p)

            # directory where predicted output should be stored
            predict_dir = '{0}/{1}/2015/{2:02}/predictions'.format(base_directory, p, m)

            # add in any additional options here
            options = ' --prediction_dir {0} --input_dir {1} --bottleneck_dir {2} --model_dir {3}'.format(predict_dir,
                                                                                                        image_dir,
                                                                                                        bottleneck_dir,
                                                                                                        model_dir)

            cmd = 'python ./predict.py {0}'.format(options)
            print(cmd)
            subproc = subprocess.Popen(cmd, env=os.environ, shell=True)
            subproc.communicate()

    print('Done')
