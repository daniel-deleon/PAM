#!/usr/bin/env python
__author__    = 'Danelle Cline'
__copyright__ = '2016'
__license__   = 'GPL v3'
__contact__   = 'dcline at mbari.org'
__doc__ = '''

Runs transfer learning tests on spectrogram images from the MBARI hydrophone
@var __date__: Date of last svn commit
@undocumented: __doc__ parser
@status: production
@license: GPL
'''

import os
import subprocess
import util
import util_plot

def batch_learn(image_dir, bottleneck_dir, model_out_dir, options):
  distortion_map = {
    '--random_scale 20': 'random_scale_20',
    '--random_scale 10': 'random_scale_10',
    '--random_crop 10': 'random_crop_10',
    '--random_brightness 10': 'random_brightness_10',
    '--random_crop 20': 'random_crop_20',
    '--random_brightness 20': 'random_brightness_20',
    '--random_scale 50': 'random_scale_50',
    '--random_crop 50': 'random_crop_50',
    '--random_brightness 50': 'random_brightness_50'
  }

  option_model = ' --image_dir {0} --bottleneck_dir {1}'.format(image_dir, bottleneck_dir)

  for option_distort,distort_sub_dir in distortion_map.iteritems():
    out_dir = '{0}/{1}'.format(model_out_dir,  distort_sub_dir)
    util.ensure_dir(out_dir)
    # uncomment and indent if we want to 
    #if not glob.glob(out_dir + '/model*'):
    cmd = 'python ./learn.py {0} {1} {2} --model_dir {3}'.format(options, option_model, option_distort, out_dir)
    print(cmd)
    subproc = subprocess.Popen(cmd, env=os.environ, shell=True)
    subproc.communicate()

  util_plot.plot_metrics(model_out_dir)


if __name__ == '__main__':
    options = '--learning_rate .01'
    prefix = ['BlueWhaleB/', 'FinWhale/']
    base_directory = '/Users/dcline/Google Drive/PAM_Summer_Project_2017/' 
    
    for p in prefix:
        # image directory where cropped images are located
        image_dir = os.path.join(base_directory, 'data', p)
        
        # This is the directory the bottleneck features are generated; bottleneck features are generated by running each image through
        # the inception model. Once these are generated, they are cached.
        bottleneck_dir = os.path.join(os.getcwd(), 'data', p, 'bottlenecks')
        
        # directory where model output should be recorded; put outside the data directory
        model_out_dir = os.path.join(os.getcwd(),'models', p)
        
        # directory where example images for each class are
        exemplar_dir = os.path.join(base_directory, 'exemplars')
        
        # add in any additional options here
        options = options + ' --exemplar_dir {0}'.format(exemplar_dir)
        
        # run
        batch_learn(image_dir=image_dir, bottleneck_dir=bottleneck_dir, model_out_dir=model_out_dir, options=options)

    print('Done')
